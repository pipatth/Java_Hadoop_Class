Overview:
This homework is an expansion of the first homework. The assignment requires three implementation classes. The Elevator class must move(), boardPassenger(int floor) at the floor requested by the Floor class. The Building class is a class that covers both Elevator and Floor, allowing them to communicate with each other. The assignment provides a jUnit test class. 

My execution plan is to utilize the nWaiting (i.e. a count of number of passengers waiting at each floor) and stopBool (i.e. an array recording the floor that the elevator needs to stop). These two fields will act as messengers between Elevator and Floor. 

Assumption made: 

I assume that Elevator does not need to have 7 floors. It takes the number of floors from the Building class.

Execution:

Similar to the first assignment, I started with the jUnit test code. I went through the requirements and debugging the classes to pass each test. The test is well-written and straightforward. My plan was to pass disembark and elevatorMotion first. This is because these tests do not require much from the first homework. Then, I planned to pass the call test, leaving elevatorFull last.

My code passed the disembark and elevatorMotion tests on the first attempt. Then, I wrote a while-loop in the move() method to boardPassenger() and leaveFloor() until the number of passengers waiting is zero. This works quite well and pass the call test. After that, I built ElevatorFullException class and add the exception to boardPassenger() method. Then, I added try {} and catch {} statements in the move() method in the while-loop mentioned earlier.

I got stuck at the end with the last part of the elevatorFull test. This is because I forgot that throwing an exception and break the loop is not enough. The elevator needs to come back to get the passenger if it is full before they can get in. As a result, I added another line after println(elevatorFullException) to change stopBool to false. This asks the elevator to stop again next time. Now the classes passed every test without a problem.
