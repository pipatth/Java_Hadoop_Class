Answers:

1. Why does the NO_LOCKING test succeed for one thread and fail for 2-20 threads? (It is possible that you will see
some successes for larger number of threads. But if you see no failures, then something is amiss.)

Because when we run one thread, the program accesses the accounts one at a time. This is safe because withdrawal
occurs after checking whether there is enough money or not and the balance does not change during the time between
checking for insufficient funds and transfering money.

On the contrary, when we run more than one thread without a lock, threads can cross each other and accessing the
accounts at the same time. For example, if the withdrawal account has $100 but two threads try to withdraw $70 each
at the same time, they can get around the insufficient fund exception and complete the transfer. This result in a
failure. We can notice this from the lower actual total balance than the expected one.

2. How do you explain the change in performance for LOCK_BANK as threads increase from 1 to 20.
Performance get

3. How does the performance of LOCK_BANK compare to that of LOCK_ACCOUNTS? How do you explain this?
When locking the whole bank (i.e. locking accounts array), the performance is slower than locking only two accounts.
This is because threads have to wait for other threads to complete the transfer and release all accounts. Threads
that don't involve in the two active accounts got stop, leading to inefficiency.
